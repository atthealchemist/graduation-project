# This is a basic workflow to help you get started with Actions

name: gpks-backend-ci

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch

env:
  projectName: gpks-server
  root: ./graduation-project-system-backend/
  rootUp: ./graduation-project-system-backend/../
  distWindows: ./graduation-project-system-backend/dist/windows/
  distLinux: ./graduation-project-system-backend/dist/linux/
  bundleWindows: ./graduation-project-system-backend/bundle/windows/
  bundleLinux: ./graduation-project-system-backend/bundle/linux/


on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-deb-package:
    runs-on: ubuntu-latest
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Creating folders
        run: |
          mkdir -p ${{ env.distLinux }}
          mkdir -p ${{ env.bundleLinux }}
            
      - name: Installing system build prerequisites
        run: |
          sudo apt install -y ruby ruby-dev rubygems build-essential python3.8 python3.8-dev python3-pip python3-setuptools python3.8-venv python3-wheel
          sudo gem install --no-document fpm
      
      - name: Check python version
        run: python3.8 --version
      
      - name: Installing Python build prerequisites
        run: python3.8 -m pip install -U PyInstaller

      # - name: Show contents of directory
      #   run: ls -lah ${{ env.root }}

      - name: Installing Python project dependencies
        run: python3.8 -m pip install -r ${{ env.root }}/requirements.txt

      - name: Bundle with PyInstaller
        run: python3.8 -m PyInstaller --distpath ${{ env.distLinux }} ${{ env.root }}/server.py --onefile -n ${{ env.projectName }}

      - name: Pack executable into deb-package
        run: fpm --config-files ${{ env.root }}/config.yml -t deb -n ${{ env.projectName }} -p ${{ env.bundleLinux }} -s dir ${{ env.distLinux }}/${{ env.projectName }}/=/usr/bin/${{ env.projectName }} ${{ env.root }}/config.yml=/etc/${{ env.projectName }}/config.yml

      - name: Archive bundle
        run: zip -j -r bundle_linux.zip ${{ env.bundleLinux }}/
      
      # - name: Show root
      #   run: ls -lah ${{ env.root }}
      
      # - name: Show root up
      #   run: ls -lah ${{ env.root }}/../

      # - name: Show dist folder
      #   run: ls -lah ${{ env.distLinux }}
      
      # - name: Show bundle folder
      #   run: ls -lah ${{ env.bundleLinux }}
      
      - name: Set release datetime
        run:  echo ::set-env name=current::$(date "+%Y%m%d_%H%M")

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.current }}_linux
          release_name: Linux release ${{ env.current }}
          body: |
            ## Linux release ${{ env.current }} changes

            History from `${{ steps.attrs.outputs.tail }}` to `${{ steps.attrs.outputs.head }}`

            ### Commits

            ${{ steps.attrs.outputs.commits }}

            ### Pull Requests

            ${{ steps.attrs.outputs.prs }}

            ### Contributors

            ${{ steps.attrs.outputs.contributors }}

            ### Files

            ```
            ${{ steps.attrs.outputs.files }}
            ```
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ env.rootUp }}/bundle_linux.zip
          asset_name: ${{ env.projectName }}_linux.zip
          asset_content_type: application/zip
  
  build-win-installer:
    runs-on: windows-latest
    steps:

      - uses: actions/checkout@v2
        with:
         submodules: true
      
      - name: Setup Python 3.8
        id: setup-python-win
        uses: actions/setup-python@v2
        with:
          python-version: '3.8' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

      - name: Check python version
        run: python -c "import sys; print(sys.version)"
      
      - name: Installing Python build prerequisites
        run: python -m pip install PyInstaller

      # - name: Show contents of directory
      #   run: ls -lah ${{ env.root }}

      - name: Installing Python project dependencies
        run: python -m pip install -r ${{ env.root }}/requirements.txt
      
      - name: Installing uvicorn without uvloop
        run: python -m pip install --no-deps uvicorn

      - name: Bundle with PyInstaller
        run: python -m PyInstaller --distpath ${{ env.distWindows }} ${{ env.root }}/server.py --onefile -n ${{ env.projectName }}
      
      - name: Run Inno Setup compiler
        run: iscc /p /O "${{ env.bundleWindows }}" /F "${{ env.projectName }}-windows-installer" /S byparam=$p "${{ env.root }}\\Installer\\${{ env.projectName }}.iss"

      - name: Archive bundle
        run: zip -j -r bundle_windows.zip ${{ env.bundleWindows }}/
      
      # - name: Show root
      #   run: ls -lah ${{ env.root }}
      
      # - name: Show root up
      #   run: ls -lah ${{ env.root }}/../

      # - name: Show dist folder
      #   run: ls -lah ${{ env.distLinux }}
      
      # - name: Show bundle folder
      #   run: ls -lah ${{ env.bundleLinux }}
      
      - name: Set release datetime
        run:  echo ::set-env name=current::$(date "+%Y%m%d_%H%M")

      - name: Create Windows Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.current }}_windows
          release_name: Windows release ${{ env.current }}
          body: |
            ## Windows release ${{ env.current }} changes

            History from `${{ steps.attrs.outputs.tail }}` to `${{ steps.attrs.outputs.head }}`

            ### Commits

            ${{ steps.attrs.outputs.commits }}

            ### Pull Requests

            ${{ steps.attrs.outputs.prs }}

            ### Contributors

            ${{ steps.attrs.outputs.contributors }}

            ### Files

            ```
            ${{ steps.attrs.outputs.files }}
            ```
          draft: false
          prerelease: false

      - name: Upload Windows Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.rootUp }}/bundle_windows.zip
          asset_name: ${{ env.projectName }}_windows.zip
          asset_content_type: application/zip